% \iffalse meta-comment
%
% File: siunitx-number.dtx Copyright (C) 2014 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    http://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-number} -- Parsing and formatting numbers^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-number} implementation}
%
% Start the DocStrip guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 DocStrip convention): only internal
% material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_number>
%    \end{macrocode}
%
% \subsection{Main formatting routine}
%
% \begin{variable}[int]{\l_@@_formatted_tl}
%   A token list for the final formatted result: may or may not be generated
%   by the parser, depending on settings which are active.
%    \begin{macrocode}
\tl_new:N \l_@@_formatted_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\siunitx_number_format:nN}
% \begin{macro}[aux]{\@@_format:nN}
%    \begin{macrocode}
\cs_new_protected:Npn \siunitx_number_format:nN #1#2
  {
    \@@_format:nN {#1} #2
  }
\cs_new_protected:Npn \@@_format:nN #1#2
  {
    \group_begin:
      \@@_parse:n {#1}
    \exp_args:NNNV \group_end:
    \tl_set:Nn #1 \l_@@_formatted_tl
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Parsing numbers}
%
% \begin{variable}[int]^^A
%   {
%      \l_@@_input_uncert_close_tl ,
%      \l_@@_input_complex_tl      ,
%      \l_@@_input_comparator_tl   ,
%      \l_@@_input_decimal_tl      ,
%      \l_@@_input_digit_tl        ,
%      \l_@@_input_exponent_tl     ,
%      \l_@@_input_ignore_tl       ,
%      \l_@@_input_uncert_open_tl  ,
%      \l_@@_input_protect_tl      ,
%      \l_@@_input_sign_tl         ,
%      \l_@@_input_symbol_tl       ,
%      \l_@@_input_uncert_sign_tl
%   }
%   Options which apply to the main formatting routine, and so are not tied
%   to either symbolic or literal input.
%    \begin{macrocode}
\keys_define:nn { siunitx / number }
 {
    input-close-uncertainty .tl_set:N = \l_@@_input_uncert_close_tl ,
    input-complex-roots     .tl_set:N = \l_@@_input_complex_tl      ,
    input-comparators       .tl_set:N = \l_@@_input_comparator_tl   ,
    input-decimal-markers   .tl_set:N = \l_@@_input_decimal_tl      ,
    input-digits            .tl_set:N = \l_@@_input_digit_tl        ,
    input-exponent-markers  .tl_set:N = \l_@@_input_exponent_tl     ,
    input-ignore            .tl_set:N = \l_@@_input_ignore_tl       ,
    input-open-uncertainty  .tl_set:N = \l_@@_input_uncert_open_tl  ,
    input-signs             .tl_set:N = \l_@@_input_sign_tl         ,
    input-uncertainty-signs .code:n   =
      {
        \tl_set:Nn \l_@@_input_uncert_sign_tl {#1}
        \tl_map_inline:nn {#1}
          {
            \tl_if_in:NnF \l_@@_input_sign_tl {##1}
              { \tl_put_right:Nn \l_@@_input_sign_tl {##1} }
          }
      }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}[int]{\l_@@_imaginary_tl, \l_@@_real_tl}
%   Used to hold the real and imaginary parts of a number in the standardised
%   format.
%    \begin{macrocode}
\tl_new:N \l_@@_imaginary_tl
\tl_new:N \l_@@_real_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[aux]{\@@_parse:n}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse:n
  {
    \tl_clear:N \l_@@_imaginary_tl
    \tl_clear:N \l_@@_real_tl
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Processing numbers}
%
% \subsection{Formatting parsed numbers}
%
% \subsection{Standard settings for module options}
%
% Some of these follow naturally from the point of definition
% (\emph{e.g.}~boolean variables are always |false| to begin with),
% but for clarity everything is set here.
%    \begin{macrocode}
\keys_set:nn { siunitx / number }
  { % (
    input-close-uncertainty = )                                      ,
    input-complex-roots     = ij                                     , 
    input-comparators       = { <=>\approx\ge\geq\gg\le\leq\ll\sim } ,
    input-decimal-markers   = { ., }                                 ,
    input-digits            = 0123456789                             ,
    input-exponent-markers  = dDeE                                   ,
    input-open-uncertainty  = (                                      , % )
    input-signs             = +-\mp\pm                               ,
    input-uncertainty-signs = \pm
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex