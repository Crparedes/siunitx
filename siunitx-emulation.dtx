% \iffalse meta-comment
%
% File: siunitx-emulation.dtx Copyright (C) 2016-2018 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-emulation} -- Emulation^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-emulation} implementation}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention). In contrast
% to other parts of the bundle, the functions here may need to redefine those
% from various submodules.
%    \begin{macrocode}
%<@@=siunitx>
%    \end{macrocode}
%
% \subsection{Version~2}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Some messages.
%    \begin{macrocode}
\msg_new:nnn { siunitx } { option-deprecated }
  {
    Option~"#1"~has~been~deprecated~in~this~release.\\ \\
    Use~"#2"~as~a~replacement.
  }
\msg_new:nnn { siunitx } { option-removed }
  { Option~"#1"~has~been~removed~in~this~release. }
%    \end{macrocode}
%
% \begin{macro}{\@@_option_deprecated:nn}
% \begin{macro}{\@@_option_deprecated:nnn, \@@_option_deprecated:nnV}
%   Abstract out a simple wrapper.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_option_deprecated:nn #1#2
  {
    \msg_info:nnnn { siunitx } { option-deprecated } {#1} {#2}
    \keys_set:nn { siunitx } {#2}
  }
\cs_new_protected:Npn \@@_option_deprecated:nnn #1#2#3
  {
    \msg_info:nnnn { siunitx } { option-deprecated } {#1} {#2}
    \keys_set:nn { siunitx } { #2 = #3 }
  }
\cs_generate_variant:Nn \@@_option_deprecated:nnn { nnV }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Document commands}
%
% \begin{macro}{\si}
%   A straight copy of \cs{unit}.
%    \begin{macrocode}
\NewDocumentCommand \si { O { } m }
  {
    \mode_leave_vertical:
    \group_begin:
      \keys_set:nn { siunitx } {#1}
      \siunitx_unit_format:nN {#2} \l_@@_tmp_tl
      \siunitx_print:nV { unit } \l_@@_tmp_tl
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\SI}
%   Almost the same as \cs{qty}, but with the addition pre-unit.
%    \begin{macrocode}
\NewDocumentCommand \SI { O { } m o m }
  {
    \mode_leave_vertical:
    \group_begin:
      \keys_set:nn { siunitx } {#1}
      \IfNoValueF {#3}
        {
          \siunitx_unit_format:nN {#3} \l_@@_tmp_tl
          \siunitx_print:nV { unit } \l_@@_tmp_tl
          \nobreak % TEMP
        }
      \siunitx_number_format:nN {#2} \l_@@_tmp_tl
      \siunitx_print:nV { number } \l_@@_tmp_tl
      \, \nobreak % TEMP
      \siunitx_unit_format:nN {#4} \l_@@_tmp_tl
      \siunitx_print:nV { unit } \l_@@_tmp_tl
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Number options}
% 
% For the basic emulation, just set up some information.
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    input-protect-tokens .code:n =
      {
        \msg_warning:nn { siunitx } { option-removed }
          { input-protect-tokens }
      }
  }
%    \end{macrocode}
%
% Options for number processing: largely removals.
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    add-decimal-zero .code:n =
      {
        \@@_option_deprecated:nn
          { add-decimal-zero }
          { minimum-decimal-digits~=~1 }
      } ,
    add-integer-zero .code:n =
      {
        \msg_warning:nnn { siunitx } { option-removed }
          { add-integer-zero }
      } ,
   explicit-sign .code:n =
      {
        \str_if_eq:nnTF {#1} { + }
          {
            \@@_option_deprecated:nn
              { explicit-sign }
              { print-implicit-plus~=~true  }
          }
          {
            \msg_warning:nnn { siunitx } { option-removed }
              { explicit-sign }
          }
      } ,
    retain-explicit-plus .code:n =
      {
        \msg_warning:nnn { siunitx } { option-removed }
          { retain-explicit-plus }
      } ,
    retain-unity-mantissa .code:n =
      {
        \@@_option_deprecated:nnV
          { retain-unity-mantissa }
          { print-unity-mantissa }
          \l_keys_value_tl
      } ,
    retain-zero-exponent .code:n =
      {
        \@@_option_deprecated:nnV
          { retain-zero-exponent }
          { print-zero-exponent }
          \l_keys_value_tl
      } ,
    omit-uncertainty .code:n =
      {
        \@@_option_deprecated:nnV
          { omit-uncertainty }
          { drop-uncertainty }
          \l_keys_value_tl
      } ,
    scientific-notation .choice: ,
    scientific-notation / engineering .code:n =
      {
        \@@_option_deprecated:nn
          { scientific-notation~=~engineering }
          { exponent-mode~=~engineering }
      } ,
    scientific-notation / fixed .code:n =
      {
        \@@_option_deprecated:nn
          { scientific-notation~=~fixed }
          { exponent-mode~=~fixed }
      } ,
    scientific-notation / false .code:n =
      {
        \@@_option_deprecated:nn
          { scientific-notation~=~false }
          { exponent-mode~=~none }
      } ,
    scientific-notation / true .code:n =
      {
        \@@_option_deprecated:nn
          { scientific-notation~=~true }
          { exponent-mode~=~scientific }
      } ,
    zero-decimal-to-integer .code:n =
      {
        \@@_option_deprecated:nn
          { zero-decimal-to-integer }
          { drop-zero-decimal }
      }
  }
%    \end{macrocode}
%
% \subsubsection{Unit options}
%
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    literal-superscript-as-power .code:n =
      {
        \msg_warning:nnn { siunitx } { option-removed }
          { literal-superscript-as-power }
      } ,
    per-mode / reciprocal .code:n =
      {
        \@@_option_deprecated:nn
          { per-mode~=~reciprocal }
          { per-mode~=~power }
      } ,
    per-mode / reciprocal-positive-first .code:n =
      {
        \@@_option_deprecated:nn
          { per-mode~=~reciprocal-positive-first }
          { per-mode~=~power-positive-first }
      } ,
    power-font .code:n =
      {
        \msg_warning:nnn { siunitx } { option-removed }
          { power-font }
      } ,
    qualifier-mode / brackets .code:n =
      {
        \@@_option_deprecated:nn
          { qualifier-mode~=~brackets }
          { qualifier-mode~=~bracket }
      } ,
    qualifier-mode / space .meta:n =
      {
        \msg_info:nnnn { siunitx } { option-deprecated }
          { qualifier-mode~=~space }
          { qualifier-mode~=~phrase"~plus~"qualifier-phrase=\  }
        \keys_set:nn
          { siunitx }
          { qualifier-mode = phrase, qualifier-phrase = \  }
      } ,
    qualifier-mode / text .meta:n =
      {
        \@@_option_deprecated:nn
          { qualifier-mode~=~text }
          { qualifier-mode~=~combine }
      }
  }
%    \end{macrocode}
%
% \subsubsection{Table options}
%
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    table-align-text-post .code:n =
      {
        \@@_option_deprecated:nnV
          { table-align-text-post }
          { table-align-text-after }
          \l_keys_value_tl
      } ,
    table-align-text-pre .code:n =
      {
        \@@_option_deprecated:nnV
          { table-align-text-pre }
          { table-align-text-before }
          \l_keys_value_tl
      } ,
    table-number-alignment / center-decimal-marker .code:n =
      {
        \msg_info:nnnn { siunitx } { option-deprecated }
          { table-number-alignment~=~center-decimal-marker }
          { table-alignment-mode~=~marker }
        \keys_set:nn
          { siunitx }
          { table-alignment-mode = marker }
      } ,
    table-omit-exponent .code:n =
      {
        \msg_info:nnnn { siunitx } { option-deprecated }
          { table-omit-exponent }
          { drop-uncertainty~and~exponent-mode~=~fixed }
        \str_if_eq:VnTF \l_keys_value_tl { true }
          {
            \keys_set:nn
              { siunitx }
              {
                drop-uncertainty = true ,
                exponent-mode    = fixed
              }
          }
          {
            \keys_set:nn
              { siunitx }
              { drop-uncertainty = false }
          }
      } ,
    table-space-text-post .code:n =
      {
        \msg_info:nnnn { siunitx } { option-deprecated }
          { table-space-text-post }
          { table-format }
        \tl_set:Nn \l_@@_table_after_model_tl {#1}
      } ,
    table-space-text-pre .code:n =
      {
        \msg_info:nnnn { siunitx } { option-deprecated }
          { table-space-text-post }
          { table-format }
        \tl_set:Nn \l_@@_table_before_model_tl {#1}
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \subsubsection{Loadable configuration}
%
%    \begin{macrocode}
%<*v2>
%    \end{macrocode}
%
% \begin{variable}
%   {\l_@@_number_input_realdigits_tl, \l_@@_number_input_symbol_tl}
%   Emulation for input options: |input-protect-tokens| is a simple no-op,
%   whilst |input-symbols| is combined with |input-digits|, so the latter is
%   also re-defined.
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    input-digits .code:n =
      {
        \tl_set:Nn \l_@@_number_input_realdigits_tl {#1}
        \tl_set:Nx \l_@@_number_input_digit_tl
          {
            \exp_not:V \l_@@_number_input_realdigits_tl
            \exp_not:V \l_@@_number_input_symbol_tl
          }
      } ,
    input-protect-tokens .code:n =
      {
        \msg_info:nn { siunitx } { option-deprecated }
          { input-protect-tokens }
          { input-digits }
      } ,
    input-symbols .code:n =
      {
        \tl_set:Nn \l_@@_number_input_symbol_tl {#1}
        \tl_set:Nx \l_@@_number_input_digit_tl
          {
            \exp_not:V \l_@@_number_input_realdigits_tl
            \exp_not:V \l_@@_number_input_symbol_tl
          }
      }
  }
\tl_new:N \l_@@_number_input_realdigits_tl
\tl_new:N \l_@@_number_input_symbol_tl
%    \end{macrocode}
% \end{variable}
%
% Standard settings where appropriate.
%    \begin{macrocode}
\keys_set:nn { siunitx }
  {
    input-symbols = \dots\pi
  }
%    \end{macrocode}
%
% The old |s| column type is handled by using the functionality of
% \pkg{collcell}.
%    \begin{macrocode}
\RequirePackage { collcell }
\AtBeginDocument
  {
    \@@_declare_column:Nnn s
      { \collectcell \unit }
      { \endcollectcell }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</v2>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex