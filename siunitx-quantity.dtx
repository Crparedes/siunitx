% \iffalse meta-comment
%
% File: siunitx-quantity.dtx Copyright (C) 2018-2021 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
\ProvideDocumentCommand\foreign{m}{\textit{#1}}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-quantity} -- Quantities^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{function}{\siunitx_quantity:nn}
%   \begin{syntax}
%     \cs{siunitx_quantity:nn} \Arg{number} \Arg{unit}
%   \end{syntax}
%   Parses the \meta{number} and the \meta{unit} as detailed for
%   \cs{siunitx_number_parse:nN} and \cs{siunitx_unit_format:nN},
%   the prints the results using \cs{siunitx_print:nn}.
% \end{function}
%
% \begin{function}{allow-quantity-breaks}
%   \begin{syntax}
%     |allow-quantity-breaks| = |true|\verb"|"|false|
%   \end{syntax}
% \end{function}
%
% \begin{function}{prefix-mode}
%   \begin{syntax}
%     |prefix-mode| = |extract|\verb"|"|input|
%   \end{syntax}
% \end{function}
%
% \begin{function}{quantity-product}
%   \begin{syntax}
%     |quantity-product| = \meta{tokens}
%   \end{syntax}
% \end{function}
%
% \begin{function}{separate-uncertainty-units}
%   \begin{syntax}
%     |separate-uncertainty-units| = |bracket|\verb"|"|repeat|\verb"|"|single|
%   \end{syntax}
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-quantity} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention): only
% internal material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_quantity>
%    \end{macrocode}
%
% \subsection{Initial set-up}
%
% \begin{variable}{\l_@@_tmp_fp, \l_@@_tmp_tl}
%   Scratch space.
%    \begin{macrocode}
\tl_new:N \l_@@_tmp_fp
\tl_new:N \l_@@_tmp_tl
%    \end{macrocode}
% \end{variable}
%
% \subsection{Main formatting routine}
%
% \begin{variable}{\l_@@_bracket_close_tl, \l_@@_bracket_open_tl}
%   Purely internal for the present.
%    \begin{macrocode}
\tl_new:N \l_@@_bracket_close_tl
\tl_new:N \l_@@_bracket_open_tl
\tl_set:Nn \l_@@_bracket_open_tl { ( }
\tl_set:Nn \l_@@_bracket_close_tl { ) }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_break_bool          ,
%     \l_@@_prefix_bool         ,
%     \l_@@_product_tl          ,
%     \l_@@_uncert_bracket_bool ,
%     \l_@@_uncert_repeat_bool
%   }
%    \begin{macrocode}
\bool_new:N \l_@@_prefix_bool
\bool_new:N \l_@@_uncert_bracket_bool
\bool_new:N \l_@@_uncert_repeat_bool
\keys_define:nn { siunitx }
  {
    allow-quantity-breaks .bool_set:N =
      \l_@@_break_bool ,
    prefix-mode .choice:,
    prefix-mode / extract .code:n =
     { \bool_set_false:N \l_@@_prefix_bool } ,
    prefix-mode / input .code:n =
     { \bool_set_true:N \l_@@_prefix_bool } ,
    quantity-product .tl_set:N =
      \l_@@_product_tl ,
    separate-uncertainty-units .choice: ,
    separate-uncertainty-units / bracket .code:n =
      {
        \bool_set_true:N \l_@@_uncert_bracket_bool
        \bool_set_false:N \l_@@_uncert_repeat_bool
      } ,
    separate-uncertainty-units / repeat .code:n =
      {
        \bool_set_false:N \l_@@_uncert_bracket_bool
        \bool_set_true:N \l_@@_uncert_repeat_bool
      } ,
    separate-uncertainty-units / single .code:n =
      {
        \bool_set_false:N \l_@@_uncert_bracket_bool
        \bool_set_false:N \l_@@_uncert_repeat_bool
      }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_number_tl, \l_@@_unit_tl}
%    \begin{macrocode}
\tl_new:N \l_@@_number_tl
\tl_new:N \l_@@_unit_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\siunitx_quantity:nn, \@@_parsed:nn}
%   For quantities, there is bit to do to combine things. The first question is
%   whether we are parsing at all: if not, things are quite short.
%    \begin{macrocode}
\cs_new_protected:Npn \siunitx_quantity:nn #1#2
  {
    \group_begin:
      \siunitx_unit_options_apply:n {#2}
      \tl_if_blank:nTF {#1}
        {
          \siunitx_unit_format:nN {#2} \l_@@_unit_tl
          \siunitx_print:nV { unit } \l_@@_unit_tl
        }
        {
          \bool_if:NTF \l_siunitx_number_parse_bool
            { \@@_parsed:nn {#1} {#2} }
            {
              \tl_set:Nn \l_@@_number_tl { \ensuremath {#1} }
              \siunitx_unit_format:nN {#2} \l_@@_unit_tl
              \exp_args:NV \@@_single:n \l_@@_number_tl
            }
        }
    \group_end:
  }
%    \end{macrocode}
%   For parsed numbers, we have two major questions to think about: whether we
%   are combining prefixes, and whether we have a multi-part numbers to handle.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parsed:nn #1#2
  {
    \siunitx_number_parse:nN {#1} \l_@@_number_tl
    \bool_if:NTF \l_@@_prefix_bool
      { \siunitx_unit_format:nN {#2} \l_@@_unit_tl }
      {
        \siunitx_unit_format_extract_prefixes:nNN {#2}
          \l_@@_unit_tl \l_@@_tmp_fp
        \exp_args:NV \@@_adjust_exp:nNN
          \l_@@_number_tl \l_@@_tmp_fp \l_@@_number_tl
      }
    \siunitx_number_process:NN \l_@@_number_tl \l_@@_number_tl
    \tl_set:Nx \l_@@_number_tl
      { \siunitx_number_format:NN \l_@@_number_tl \q_nil }
    \exp_after:wN \@@_parsed_aux:w \l_@@_number_tl \q_stop
  }
%    \end{macrocode}
%   To find out if we need to work harder, we first need to split the formatted
%   number into the constituent parts. That is done using the table-like
%   approach: that avoids needing to both check the settings and break down
%   the input separately.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parsed_aux:w
  #1 \q_nil #2 \q_nil #3 \q_nil #4 \q_nil #5 \q_nil #6 \q_nil #7 \q_nil #8 \q_nil #9 \q_stop
  { \@@_parsed_aux:nnw {#1#2#3#4} {#5#6#7#8} #9 \q_stop }
\cs_new_protected:Npn \@@_parsed_aux:nnw #1#2 #3 \q_nil #4 \q_stop
  { \@@_parsed_aux:nnn {#1} {#2} {#3#4} }
\cs_new_protected:Npn \@@_parsed_aux:nnn #1#2#3
  {
    \tl_if_blank:nTF {#2}
      { \@@_single:n {#1#3} }
      {
        \bool_if:NTF \l_@@_uncert_bracket_bool
          {
            \exp_args:Nx \@@_single:n
              {
                \exp_not:V \l_@@_bracket_open_tl
                \exp_not:n {#1#2}
                \exp_not:V \l_@@_bracket_close_tl
                \exp_not:n {#3}
              }
          }
          {
            \bool_if:NTF \l_@@_uncert_repeat_bool
              {
                \@@_single:n {#1}
                \@@_single:n { { } #2#3}
              }
              { \@@_single:n {#1#2#3} }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_adjust_exp:nNN}
% \begin{macro}{\@@_adjust_exp:nnnnnnnNN}
% \begin{macro}[EXP]{\@@_adjust_exp:n}
% \begin{macro}[EXP]{\@@_adjust_exp:Nw}
%   To adjust the exponent part for a combined prefix, we decompose the value,
%   just changing the exponent part. This allows things to work with an
%   uncertainty.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_adjust_exp:nNN #1#2#3
  { \@@_adjust_exp:nnnnnnnNN #1 #2 #3 }
\cs_new_protected:Npn \@@_adjust_exp:nnnnnnnNN #1#2#3#4#5#6#7#8#9
  {
    \tl_set:Nx #9
      {
        {#1} {#2} {#3} {#4} {#5}
        \exp_args:Ne \@@_adjust_exp:n { \fp_eval:n { #6#7 + #8 } }
      }
  }
\cs_new:Npn \@@_adjust_exp:n #1
  { \@@_adjust_exp:Nw #1 \q_stop }
\cs_new:Npn \@@_adjust_exp:Nw #1#2 \q_stop
  {
    \token_if_eq_meaning:NNTF #1 -
      { {#1} {#2} }
      { { } {#1#2} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_single:n}
%   When there is a single part to the number, printing is quite
%   straight-forward. The number is passed explicitly as that makes life
%   easier combining the routes.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_single:n #1
  {
    \siunitx_print:nn { number } {#1}
    \tl_if_empty:NF \l_@@_unit_tl
      {
        \tl_use:N \l_@@_product_tl
        \bool_if:NF \l_@@_break_bool { \nobreak }
        \siunitx_print:nV { unit } \l_@@_unit_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Standard settings for module options}
%
% Some of these follow naturally from the point of definition
% (\foreign{e.g.}~boolean variables are always |false| to begin with),
% but for clarity everything is set here.
%    \begin{macrocode}
\keys_set:nn { siunitx }
  {
    allow-quantity-breaks      = false  ,
    prefix-mode                = input ,
    quantity-product           = \,     ,
    separate-uncertainty-units = bracket
  }
%    \end{macrocode}
%
% \subsection{Adjustments to units}
%
% \begin{macro}{\@@_non_latin:n}
% \begin{macro}{\@@_non_latin:nnnn}
%   As in \pkg{siunitx-unit}, but internal in both cases as it's rather
%   specialised.
%    \begin{macrocode}
\bool_lazy_or:nnTF
  { \sys_if_engine_luatex_p: }
  { \sys_if_engine_xetex_p: }
  {
    \cs_new:Npn \@@_non_latin:n #1
      { \char_generate:nn {#1} { \char_value_catcode:n {#1} } }
  }
  {
    \cs_new:Npn \@@_non_latin:n #1
      {
        \exp_last_unbraced:Nf \@@_non_latin:nnnn
          { \char_to_utfviii_bytes:n {#1} }
      }
    \cs_new:Npn \@@_non_latin:nnnn #1#2#3#4
      {
        \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_not:N \char_generate:nn {#1} { 13 }
        \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_not:N \char_generate:nn {#2} { 13 }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\degree}
%   The \cs{degree} unit is re-declared here: this is needed for using it
%   in quantities. This is done here as it avoids a dependency in
%   \pkg{siunitx-unit} on options it does not contain.
%    \begin{macrocode}
\siunitx_declare_unit:Nxn \degree
  { \@@_non_latin:n { "00B0 } }
  { quantity-product = { } }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
