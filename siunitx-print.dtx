% \iffalse meta-comment
%
% File: siunitx-print.dtx Copyright (C) 2016 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    http://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-print} -- Printing material with font control^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{function}{\siunitx_print:nn, \siunitx_print:nV}
%   \begin{syntax}
%     \cs{siunitx_print:nn} \Arg{type} \meta{material}
%   \end{syntax}
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-print} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention): only
% internal material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_print>
%    \end{macrocode}
%
% \subsection{Initial set up}
%
% The printing routines depend on \pkg{amstext} for text mode working.
%    \begin{macrocode}
\RequirePackage { amstext }
%    \end{macrocode}
%
% Color support is always required
%    \begin{macrocode}
\RequirePackage { color }
%    \end{macrocode}
%
% \subsection{Printing routines}
%
% \begin{variable}
%   {
%     \l_@@_number_color_tl  ,
%     \l_@@_number_mode_tl   ,
%     \l_@@_unit_color_tl    ,
%     \l_@@_unit_mode_tl     ,
%     \l_@@_control_shape_bool
%   }
%   Options which apply to the main formatting routine, and so are not tied
%   to either symbolic or literal input.
%    \begin{macrocode}
\tl_new:N \l_@@_number_mode_tl
\tl_new:N \l_@@_unit_mode_tl
\keys_define:nn { siunitx / print }
  {
    color        .meta:n      = { number-color = #1 , unit-color = #1 } ,
    control-shape .bool:N     = \l_@@_control_shape_bool                 ,
    mode         .meta:n      = { number-mode = #1 , unit-mode = #1 }   ,
    number-color .tl_set:N    = \l_@@_number_color_tl                   ,
    number-mode  .choices:nn  =
      { match , math , text }
      { \tl_set_eq:NN \l_@@_number_mode_tl \l_keys_choice_tl }         ,
    unit-color  .tl_set:N     = \l_@@_unit_color_tl                     ,
    unit-mode   .choices:nn   =
      { match , math , text }
      { \tl_set_eq:NN \l_@@_unit_mode_tl \l_keys_choice_tl }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\siunitx_print:nn, \siunitx_print:nV}
%   The main printing function doesn't actually need to do very much: just set
%   the color and select the correct sub-function.
%    \begin{macrocode}
\cs_new_protected:Npn \siunitx_print:nn #1#2
  {
    \tl_if_empty:cTF { l_@@_ #1 _color_tl }
      { \use:n }
      { \exp_args:Nv \textcolor { l_@@_ #1 _color_tl } }
        {
          \use:c
            { @@_ \tl_use:c { l_@@_ #1 _mode_tl } : n }
              {#2}
        }
  }
\cs_generate_variant:Nn \siunitx_print:nn { nV }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_match:n, \@@_math:n, \@@_text:n}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_match:n #1
  {
    \mode_if_math:TF
      { \@@_math:n {#1} }
      { \@@_text:n {#1} }
  }
\cs_new_protected:Npn \@@_math:n #1
  { \ensuremath {#1} }
\cs_new_protected:Npn \@@_text:n #1
  {
    \text
      {
        \group_begin:
          \bool_if:NF \l_@@_control_shape_bool
            { \upshape }
          #1
        \group_end:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Standard settings for module options}
%
% Some of these follow naturally from the point of definition
% (\emph{e.g.}~boolean variables are always |false| to begin with),
% but for clarity everything is set here.
%    \begin{macrocode}
\keys_set:nn { siunitx / print }
  {
    color         =       ,
    control-shape = false ,
    mode          = math  ,
    number-color  =       ,
    number-mode   = math  ,
    unit-color    =       ,
    unit-mode     = math
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex