% \iffalse meta-comment
%
% File: siunitx-print.dtx Copyright (C) 2016 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    http://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-print} -- Printing material with font control^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{function}{\siunitx_print:nn, \siunitx_print:nV}
%   \begin{syntax}
%     \cs{siunitx_print:nn} \Arg{type} \meta{material}
%   \end{syntax}
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-print} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention): only
% internal material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_print>
%    \end{macrocode}
%
% \subsection{Initial set up}
%
% The printing routines depend on \pkg{amstext} for text mode working.
%    \begin{macrocode}
\RequirePackage { amstext }
%    \end{macrocode}
%
% Color support is always required.
%    \begin{macrocode}
\RequirePackage { color }
%    \end{macrocode}
%
% \begin{macro}{\str_case:VnF}
%   Variants.
%    \begin{macrocode}
\cs_generate_variant:Nn \str_case:nnF { V }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\l_@@_tmp_box}
%   Scratch space.
%    \begin{macrocode}
\box_new:N \l_@@_tmp_box
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\document}
% \begin{variable}{\c_@@_mathnormal_int, \c_@@_mathrm_int}
%   In order to correctly determine that |\mathrm| is in use, we need to know
%   what math family it uses. That can be done by examining \tn{fam} at the
%   start of the document. This is run as a hook onto \cs{document}, rather
%   than using \tn{AtBeginDocument} as it has to come after anything that
%   \pkg{fontspec} does (nasty errors arise otherwise). As this is a true
%   one-off, we avoid wasting a box.
%    \begin{macrocode}
\tl_put_right:Nn \document
  {
    \group_begin:
      \hbox_set:Nn \l_@@_tmp_box
        {
          \ensuremath
            { \int_const:Nn \c_@@_mathnormal_int { \fam } }
        }
      \hbox_set:Nn \l_@@_tmp_box
        {
          \ensuremath
            { \mathrm { \int_const:Nn \c_@@_mathrm_int { \fam } } }
        }
    \group_end:
    \ignorespaces
  }
%    \end{macrocode}
% \end{variable}
% \end{macro}
%
% \subsection{Printing routines}
%
% \begin{variable}
%   {
%     \l_@@_number_color_tl     ,
%     \l_@@_number_mode_tl      ,
%     \l_@@_unit_color_tl       ,
%     \l_@@_unit_mode_tl        ,
%     \l_@@_control_family_bool ,
%     \l_@@_control_shape_bool  ,
%     \l_@@_control_weight_bool
%   }
%   Options which apply to the main formatting routine, and so are not tied
%   to either symbolic or literal input.
%    \begin{macrocode}
\tl_new:N \l_@@_number_mode_tl
\tl_new:N \l_@@_unit_mode_tl
\keys_define:nn { siunitx / print }
  {
    color          .meta:n     = { number-color = #1 , unit-color = #1 } ,
    control-family .bool_set:N = \l_@@_control_family_bool               ,
    control-shape  .bool_set:N = \l_@@_control_shape_bool                ,
    control-weight .bool_set:N = \l_@@_control_weight_bool               ,
    mode           .meta:n     = { number-mode = #1 , unit-mode = #1 }   ,
    number-color   .tl_set:N   = \l_@@_number_color_tl                   ,
    number-mode    .choices:nn =
      { match , math , text }
      { \tl_set_eq:NN \l_@@_number_mode_tl \l_keys_choice_tl }          ,
    unit-color    .tl_set:N    = \l_@@_unit_color_tl                    ,
    unit-mode     .choices:nn  =
      { match , math , text }
      { \tl_set_eq:NN \l_@@_unit_mode_tl \l_keys_choice_tl }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\siunitx_print:nn, \siunitx_print:nV}
%   The main printing function doesn't actually need to do very much: just set
%   the color and select the correct sub-function.
%    \begin{macrocode}
\cs_new_protected:Npn \siunitx_print:nn #1#2
  {
    \tl_if_empty:cTF { l_@@_ #1 _color_tl }
      { \use:n }
      { \exp_args:Nv \textcolor { l_@@_ #1 _color_tl } }
        {
          \use:c
            { @@_ \tl_use:c { l_@@_ #1 _mode_tl } : n }
              {#2}
        }
  }
\cs_generate_variant:Nn \siunitx_print:nn { nV }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_match:n}
%   When the \emph{output} mode should match the input, a simple selection of
%   route can be made.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_match:n #1
  {
    \mode_if_math:TF
      { \@@_math:n {#1} }
      { \@@_text:n {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_math:n}
% \begin{macro}{\@@_math_aux:n}
%   Any setting which changes the math weight can only be set from text mode
%   (as it applies at the level of a formula). As such, the first test is to
%   see if that needs to be to check if the math version is |normal|: if not,
%   switch to text mode, sort it out and switch back. That of course means
%   that in such cases, line breaking will not be possible.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_math:n #1
  {
    \bool_lazy_all:nTF
      {
        { \mode_if_math_p: }
        { \l_@@_control_weight_bool }
        { ! \str_if_eq_p:Vn \math@version { normal } }
      }
      { \text { \mathversion { normal } \@@_math_aux:n {#1} } }
      { \@@_math_aux:n {#1} }
  }
%    \end{macrocode}
%   A second check is need for the case where we are already inside
%   \latin{e.g.}~|\mathsf| but we have been asked to control the family:
%   any numbers or other \enquote{free} text would otherwise be incorrect.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_math_aux:n #1
  {
    \bool_lazy_all:nTF
      {
        { \mode_if_math_p: }
        { \l_@@_control_family_bool }
        {
          ! \bool_lazy_or_p:nn
            { \int_compare_p:nNn \fam = \c_@@_mathnormal_int }
            { \int_compare_p:nNn \fam = \c_@@_mathrm_int }
        }
      }
      { \mathrm {#1} }
      { \ensuremath {#1} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_text:n}
% \begin{macro}{\@@_text:nn}
%   To allow propagation of math weight to text, there is some up-front work
%   to do to check for the appropriate combination of conditions. If they
%   apply, we locally set the weight \emph{before} forcing text mode so that
%   it will carry through. That requires an auxiliary to pass the information
%   into text mode.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_text:n #1
  {
    \group_begin:
      \bool_lazy_all:nTF
        {
          { \mode_if_math_p: }
          { ! \l_@@_control_weight_bool }
          { ! \str_if_eq_p:Vn \math@version { normal } }
        }
        {
          \str_case:VnF \math@version
            {
              { bold }  { \@@_text:nn { \bfseries } }
              { light } { \@@_text:nn { \lseries } }
            }
            { \@@_text:nn { } }
        }
        { \@@_text:nn { } }
          {#1}
  }
\cs_new_protected:Npn \@@_text:nn #1#2
  {
      \text
        {
          #1
          \bool_if:NT \l_@@_control_family_bool
            { \rmfamily }
          \bool_if:NT \l_@@_control_shape_bool
            { \upshape }
          \bool_if:NT \l_@@_control_weight_bool
            { \mdseries }
          #2
        }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Standard settings for module options}
%
% Some of these follow naturally from the point of definition
% (\emph{e.g.}~boolean variables are always |false| to begin with),
% but for clarity everything is set here.
%    \begin{macrocode}
\keys_set:nn { siunitx / print }
  {
    color          =       ,
    control-family = true  ,
    control-shape  = true  ,
    control-weight = true  ,
    mode           = math  ,
    number-color   =       ,
    number-mode    = math  ,
    unit-color     =       ,
    unit-mode      = math
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex