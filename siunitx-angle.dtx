% \iffalse meta-comment
%
% File: siunitx-angle.dtx Copyright (C) 2016-2018 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-angle} -- Formatting angles^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \begin{function}{\siunitx_angle:n, \siunitx_angle:nnn}
%   \begin{syntax}
%     \cs{siunitx_angle:n} \Arg{angle}
%     \cs{siunitx_angle:nnn} \Arg{degrees} \Arg{minutes} \Arg{seconds}
%   \end{syntax}
%   Typeset the \meta{angle} (which may be given as separate \meta{degree},
%   \meta{minute} and \meta{second} components). The \meta{angle} (or components)
%   may be given as expressions. The \meta{angle} should be a number as understood
%   by \cs{siunitx_format_number:nN}, with no uncertainty, exponent or imaginary
%   part.  The unit symbols for degrees, minutes and seconds are |\degree|,
%   |\arcminute| and |\arcsecond|, respectively
% \end{function}
%
% \subsection{Key--value options}
%
% The options defined by this submodule are available within the \pkg{l3keys}
% |siunitx| tree.
%
% \begin{function}{angle-mode}
%   \begin{syntax}
%     |angle-mode| = \meta{choice}
%   \end{syntax}
%   Selects how angles are formatted: a choice from
%   the options |arc|, |decimal| and |input|. The option |arc| means that angles
%   will always be typeset in arc (degree, minute, second) format, whilst
%   |decimal| means that angles are typeset as a single decimal value. The
%   |input| setting means that the input format (\foreign{i.e.}~difference
%   between \cs{siunitx_angle:n} and \cs{siunitx_angle:nnn}) is maintained. The
%   standard setting is |input|.
% \end{function}
%
% \begin{function}{arc-separator}
%   \begin{syntax}
%     |arc-separator| = \meta{separator}
%   \end{syntax}
%   Inserted between arc parts (degree, minute and second components).
%   The standard setting is |\,|.
% \end{function}
%
% \begin{function}{arc-separator-over-decimal}
%   \begin{syntax}
%     |arc-separator-over-decimal| = |true|\verb"|"|false|
%   \end{syntax}
% \end{function}
%
% \begin{function}{fill-arc-degrees}
%   \begin{syntax}
%     |fill-arc-degrees| = |true|\verb"|"|false|
%   \end{syntax}
% \end{function}
%
% \begin{function}{fill-arc-minutes}
%   \begin{syntax}
%     |fill-arc-minutes| = |true|\verb"|"|false|
%   \end{syntax}
% \end{function}
%
% \begin{function}{fill-arc-seconds}
%   \begin{syntax}
%     |fill-arc-seconds| = |true|\verb"|"|false|
%   \end{syntax}
% \end{function}
%
% \begin{function}{number-angle-product}
%   \begin{syntax}
%     |number-angle-product| = \meta{separator}
%   \end{syntax}
%   Inserted between the value of an angle and the unit (degree, minute or
%   second component). The standard setting is |\,|.
% \end{function}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-angle} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention): only
% internal material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_angle>
%    \end{macrocode}
%
%  \begin{variable}{\l_@@_tmp_tl}
%    Scratch space.
%    \begin{macrocode}
\tl_new:N \l_@@_tmp_tl
%    \end{macrocode}
%  \end{variable}
%
%  \begin{variable}
%    {
%      \l_@@_force_arc_bool       ,
%      \l_@@_force_decimal_bool   ,
%      \l_@@_angle_astronomy_bool ,
%      \l_@@_separator_tl         ,
%      \l_@@_fill_degree_bool     ,
%      \l_@@_fill_minute_bool     ,
%      \l_@@_fill_second_bool     ,
%      \l_@@_product_tl
%    }
%    \begin{macrocode}
\keys_define:nn { siunitx }
  {
    angle-mode .choice: ,
    angle-mode / arc .code:n =
      {
        \bool_set_true:N \l_@@_force_arc_bool
        \bool_set_false:N \l_@@_force_decimal_bool
      } ,
    angle-mode / decimal .code:n =
      {
        \bool_set_false:N \l_@@_force_arc_bool
        \bool_set_true:N \l_@@_force_decimal_bool
      } ,
    angle-mode / input .code:n =
      {
        \bool_set_false:N \l_@@_force_arc_bool
        \bool_set_false:N \l_@@_force_decimal_bool
      } ,
    angle-symbol-over-decimal .bool_set:N =
      \l_@@_angle_astronomy_bool ,
    arc-separator .tl_set:N =
      \l_@@_separator_tl ,
    fill-arc-degrees .bool_set:N =
      \l_@@_fill_degree_bool ,
    fill-arc-minutes .bool_set:N =
      \l_@@_fill_minute_bool ,
    fill-arc-seconds .bool_set:N =
      \l_@@_fill_second_bool ,
    number-angle-product .tl_set:N =
      \l_@@_product_tl
  }
\bool_new:N \l_@@_force_arc_bool
\bool_new:N \l_@@_force_decimal_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\siunitx_angle:n}
% \begin{macro}{\siunitx_angle:nnn}
% \begin{macro}{\@@_arc_convert:n}
%   The first step here is to force format conversion if required. Going to
%   a decimal is easy, going to arc format is a bit more painful: avoid
%   repeating calculations mainly for code readability.
%    \begin{macrocode}
\cs_new_protected:Npn \siunitx_angle:n #1
  {
    \bool_if:NTF \l_@@_force_arc_bool
      {
        \use:x
          { \@@_arc_convert:n { \fp_eval:n {#1} } }
      }
      { \@@_arc:nnn {#1} { } { } }
  }
\cs_new_protected:Npn \siunitx_angle:nnn #1#2#3
  {
    \bool_if:NTF \l_@@_force_decimal_bool
      {
        \exp_args:Nx \siunitx_angle:n
          { \fp_eval:n { #1 + (#2) / 60 + (#3) / 3600 } }
      }
      { \@@_arc_fill:nnn {#1} {#2} {#3} }
  }
\cs_new_protected:Npn \@@_arc_convert:n #1
  {
    \use:x
      {
        \siunitx_angle:nnn
          { \fp_eval:n { trunc(#1,0) } }
          { \fp_eval:n { trunc((#1 - trunc(#1,0)) * 60,0) } }
          {
            \fp_eval:n
              {
                (
                          (#1 - trunc(#1,0)) * 60
                  - trunc((#1 - trunc(#1,0)) * 60,0)
                )
                * 60
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_arc_fill:nnn}
% \begin{macro}[EXP]{\@@_arc_fill:nn}
%   Zero-filling of values gets us to a common code path irrespective of
%   the input format.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_arc_fill:nnn #1#2#3
  {
    \use:x
      {
        \@@_arc:nnn
          { \@@_arc_fill:nn { degree } {#1} }
          { \@@_arc_fill:nn { minute } {#2} }
          { \@@_arc_fill:nn { second } {#3} }
      }
  }
\cs_new:Npn \@@_arc_fill:nn #1#2
  {
    \bool_lazy_and:nnTF
      { \use:c { l_@@_fill_ #1 _bool } }
      { \tl_if_blank_p:n {#2} }
      { 0 }
      {#2}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{variable}{\l_@@_degrees_tl, \l_@@_minutes_tl, \l_@@_seconds_tl}
%   Space for formatting parsed numbers.
%   \begin{macrocode}
\tl_new:N \l_@@_degrees_tl
\tl_new:N \l_@@_minutes_tl
\tl_new:N \l_@@_seconds_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_arc:nnn}
% \begin{macro}{\@@_arc_restrict:, \@@_arc_restrict_signs:}
%   When parsing arc values, only real numbers are allowed: that is easily
%   accomplished by setting other input types to have no valid tokens. Only
%   the first part of an arc given can have a sign or comparator: this is
%   slightly more complex as it needs to be applied at the right time.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_arc:nnn #1#2#3
  {
    \group_begin:
      \@@_arc_restrict:
      \tl_if_blank:nF {#1}
        {
          \siunitx_number_format:nN {#1} \l_@@_degrees_tl
          \@@_arc_restrict_signs:
        }
      \tl_if_blank:nF {#2}
        {
          \siunitx_number_format:nN {#2} \l_@@_minutes_tl
          \tl_if_blank:nF {#1}
            { \@@_arc_restrict_signs: }
        }
      \tl_if_blank:nF {#3}
        { \siunitx_number_format:nN {#3} \l_@@_seconds_tl }
      \@@_arc_print:VVV
        \l_@@_degrees_tl
        \l_@@_minutes_tl
        \l_@@_seconds_tl
    \group_end:
  }
\cs_new_protected:Npn \@@_arc_restrict:
  {
    \keys_set:nn { siunitx }
      {
        input-close-uncertainty = ,
        input-complex-roots     = ,
        input-exponent-markers  = ,
        input-open-uncertainty  = ,
        input-uncertainty-signs =
      }
  }
\cs_new_protected:Npn \@@_arc_restrict_signs:
  {
    \keys_set:nn { siunitx }
      { input-comparators = , input-signs = }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_arc_print:nnn, \@@_arc_print:VVV, \@@_arc_print_aux:nnn}
%   The final stage of printing an angle is to put together the three parts:
%   this works even for decimal angles as they will blank arguments for the
%   other two parts.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_arc_print:nnn #1#2#3
  {
    \@@_arc_print_aux:nnn {#1} { \degree } {#2#3}
    \@@_arc_print_aux:nnn {#2} { \arcminute } {#3}
    \@@_arc_print_aux:nnn {#3} { \arcsecond } { }
  }
\cs_generate_variant:Nn \@@_arc_print:nnn { VVV }
\cs_new_protected:Npn \@@_arc_print_aux:nnn #1#2#3
  {
    \tl_if_blank:nF {#1}
      {
        \siunitx_print:nn { number } {#1}
        \nobreak
        \l_@@_product_tl
        \siunitx_unit_format:nN {#2} \l_@@_tmp_tl
        \siunitx_print:nV { unit } \l_@@_tmp_tl
        \tl_if_blank:nF {#3}
          {
            \nobreak
            \l_@@_separator_tl
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\keys_set:nn { siunitx }
  {
    angle-mode                = input ,
    angle-symbol-over-decimal = false ,
    arc-separator             =       ,
    fill-arc-degrees          = false ,
    fill-arc-minutes          = false ,
    fill-arc-seconds          = false ,
    number-angle-product      =
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex