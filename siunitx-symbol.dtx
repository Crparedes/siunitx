% \iffalse meta-comment
%
% File: siunitx-symbol.dtx Copyright (C) 2018,2019 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "siunitx bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/siunitx
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% The next line is needed so that \GetFileInfo will be able to pick up
% version data
\usepackage{siunitx}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{siunitx.sty}
%
% \title{^^A
%   \pkg{siunitx-symbol} -- Symbol-related settings^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail:
%    \href{mailto:joseph.wright@morningstar2.co.uk}
%      {joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{siunitx-symbol} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention): only
% internal material in this \emph{submodule} should be used directly.
%    \begin{macrocode}
%<@@=siunitx_symbol>
%    \end{macrocode}
%
% \begin{variable}{\l_@@_tmpa_tl, \l_@@_tmpb_tl}
%   Scratch space.
%    \begin{macrocode}
\tl_new:N \l_@@_tmpa_tl
\tl_new:N \l_@@_tmpb_tl
%    \end{macrocode}
% \end{variable}
%
%   Some of the \texttt{TS1} encoding is needed to provide symbols in
%   text mode. Some of this is only for $8$-bit engines, but there are
%   places we need this even with Unicode engines. If the user has not loaded
%   the encoding themselves, it is done here before creating the required
%   commands.
%    \begin{macrocode}
\AtBeginDocument
  {
    \cs_if_free:cT { T@TS1 }
      {
        \DeclareFontEncoding { TS1 } { } { }
        \DeclareFontSubstitution { TS1 } { cmr } { m } { n }
      }
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_textmu:}
%   For $8$-bit engines, we need an upright mu.
%    \begin{macrocode}
\bool_lazy_or:nnF
  { \sys_if_engine_luatex_p: }
  { \sys_if_engine_xetex_p: }
  {
    \cs_if_free:NTF \textmu
      {
        \DeclareTextSymbolDefault \@@_textmu: { TS1 }
        \DeclareTextSymbol \@@_textmu: { TS1 } { "00B5 }
      }
      { \cs_new_eq:NN \@@_textmu: \textmu }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_mathOmega:}
%   Abstracted out to allow for safe redefinition.
%    \begin{macrocode}
\bool_lazy_or:nnF
  { \sys_if_engine_luatex_p: }
  { \sys_if_engine_xetex_p: }
  {
    \AtBeginDocument
      {
        \cs_new_protected:Npx \@@_mathOmega:
          {
            \exp_not:N \ensuremath
              {
                \cs_if_exist:NTF \upOmega
                  { \exp_not:N \upOmega }
                  { \exp_not:N \Omega }
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_non_latin:n}
% \begin{macro}{\@@_non_latin:nnnn}
%   As in \pkg{siunitx-unit}, but internal in both cases as it's rather
%   specialised.
%    \begin{macrocode}
\bool_lazy_or:nnTF
  { \sys_if_engine_luatex_p: }
  { \sys_if_engine_xetex_p: }
  {
    \cs_new:Npn \@@_non_latin:n #1
      { \char_generate:nn {#1} { \char_value_catcode:n {#1} } }
  }
  {
    \cs_new:Npn \@@_non_latin:n #1
      {
        \exp_last_unbraced:Nf \@@_non_latin:nnnn
          { \char_codepoint_to_bytes:n {#1} }
      }
    \cs_new:Npn \@@_non_latin:nnnn #1#2#3#4
      {
        \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_not:N \char_generate:nn {#1} { 13 }
        \exp_after:wN \exp_after:wN \exp_after:wN
          \exp_not:N \char_generate:nn {#2} { 13 }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_if_replace:NnT}
%   A test to see if the unit definition which applies is still one we expect:
%   here that means it is just using a (Unicode) codepoint. The comparison
%   is string-based as \pkg{unicode-math} (at least) can alter some of them.
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_if_replace:Nn #1#2 { T , TF }
  {
    \group_begin:
      \tl_set:Nx \l_@@_tmpa_tl { \@@_non_latin:n {#2} }
      \protected@edef \l_@@_tmpa_tl
        { \exp_not:N \mathrm { \l_@@_tmpa_tl } }
      \keys_set:nn { siunitx } { parse-units = false }
      \siunitx_unit_format:nN {#1} \l_@@_tmpb_tl
      \str_if_eq:VVTF \l_@@_tmpa_tl \l_@@_tmpb_tl
        {
          \group_end:
          \prg_return_true:
        }
        {
          \group_end:
          \prg_return_false:
        }
  }
%    \end{macrocode}
% \end{macro}
%
% At the start of the document, fonts are fixed and the user may have
% altered unit set up. If things are unchanged, we can alter the settings
% such that they use something \enquote{more sensible}.
%    \begin{macrocode}
\AtBeginDocument
  {
%    \end{macrocode}
%   For |\angstrom|, direct input works in text mode so there is only a need
%   to tidy up for math mode. If \pkg{fontspec} is loaded then that problem
%   goes away, so nothing needs to be done.
%    \begin{macrocode}
    \@@_if_replace:NnT \angstrom { "00C5 }
      {
        \@ifpackageloaded { fontspec }
          { }
          {
            \siunitx_declare_unit:Nx \angstrom
              {
                \siunitx_print_text:n
                  { \@@_non_latin:n { "00C5 } }
              }
         }
      }
    \@@_if_replace:NnT \ohm { "03A9 }
      {
        \siunitx_declare_unit:Nx \ohm
          {
            \bool_lazy_or:nnTF
              { \sys_if_engine_luatex_p: }
              { \sys_if_engine_xetex_p: }
              {
                \siunitx_print_text:n
                  { \@@_non_latin:n { "03A9 } }
              }
              { \@@_mathOmega: }
         }
      }
    \@@_if_replace:NnT \micro { "03BC }
      {
        \siunitx_declare_prefix:Nnx \micro { -6 }
          {
            \siunitx_print_text:n
              {
                \bool_lazy_or:nnTF
                  { \sys_if_engine_luatex_p: }
                  { \sys_if_engine_xetex_p: }
                  { \@@_non_latin:n { "00B5 } }
                  { \exp_not:N \@@_textmu: }
              }
          }
      }
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_texttimes:}
%   For the times symbol, only \LuaTeX{} allows us to use the math mode symbol
%   directly. However, that likely won't follow the surrounding font appearance,
%   so in all cases we load the |TS1| version for text. Otherwise much the
%   same as |\textmu| support. It's hard to check for the product symbol, so
%   we just go with it an hope for the best!
%    \begin{macrocode}
\AtBeginDocument
  {
    \cs_if_free:NTF \texttimes
      {
        \DeclareTextSymbolDefault \@@_texttimes: { TS1 }
        \DeclareTextSymbol \@@_texttimes: { TS1 } { "00D6 }
      }
      { \cs_new_eq:NN \@@_texttimes: \texttimes }
    \group_begin:
        \tl_set:Nn \l_@@_tmpa_tl
          { { } { } { 2 } { } { } { } { 1 } }
        \tl_set:Nx \l_@@_tmpa_tl
          { \siunitx_number_format:N \l_@@_tmpa_tl }
        \tl_set:Nn \l_@@_tmpb_tl { 2 \times 10 ^ { 1 } }
        \tl_if_eq:NNTF \l_@@_tmpa_tl \l_@@_tmpb_tl
          {
            \group_end:
            \keys_set:nn { siunitx }
              {
                exponent-product =
                  \ifmmode \times \else \@@_texttimes: \fi ,
                product-symbol =
                  \ifmmode \times \else \@@_texttimes: \fi
              }
          }
          { \group_end: }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Bookmark definitions}
%
% Inside PDF strings, the definitions for symbols need to be reset:
% we keep things to a minimum and just reset the functions we know are
% used above.
%    \begin{macrocode}
\AtBeginDocument
  {
    \@ifpackageloaded { hyperref }
      {
        \exp_args:Nx \pdfstringdefDisableCommands
          {
            \cs_set_eq:NN \siunitx_print_text:n \exp_not:N \use:n
            \cs_set:Npn \exp_not:N \@@_textmu:
              { \@@_non_latin:n { "00B5 } }
            \cs_set:Npn \exp_not:N \@@_mathOmega:
              { \@@_non_latin:n { "03A9 } }
            \siunitx_declare_unit:Nn \exp_not:N \degree
              { \@@_non_latin:n { "00B0 } }
            \siunitx_declare_unit:Nn \exp_not:N \degreeCelsius
             { \@@_non_latin:n { "00B0 } C }
          }
      }
      { }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex